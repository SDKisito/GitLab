variables:
  KUBE_NAMESPACE_DEV: dev
  KUBE_NAMESPACE_QA: qa
  KUBE_NAMESPACE_STAGING: staging
  KUBE_NAMESPACE_PROD: prod

  IP_DEV: 80.124.62.186
  IP_QA: 80.124.62.186
  IP_STAGING: 80.124.62.186
  IP_PROD: 80.124.62.186

  NODEPORT_DEV: 30000
  NODEPORT_QA: 30003
  NODEPORT_STAGING: 30001
  NODEPORT_PROD: 30002

  IMAGE_NAME: salioudiedhiou/gitlab-fastapi

stages:
  - test
  - build
  - run
  - push
  - deploy_dev
  - deploy_qa
  - deploy_staging
  - deploy_prod

test:
  stage: test
  image: python:3.12
  tags: [local]
  script:
    - python3 -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install fastapi pytest httpx jinja2
    - export PYTHONPATH="$PYTHONPATH:$(pwd)"
    - pytest app/test_main.py

build:
  stage: build
  tags: [local]
  script:
    - docker info
    - docker build -t "$IMAGE_NAME:latest" .
    - docker tag "$IMAGE_NAME:latest" "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"

run:
  stage: run
  tags: [local]
  before_script:
    - which curl || apk add --no-cache curl
  script:
    - docker rm -f fastapi || true
    - docker run -d -p 80:8000 --name fastapi "$IMAGE_NAME:latest"
    - |
      echo "Attente que l'application FastAPI soit disponible sur http://localhost:80 ..."
      for i in {1..10}; do
        curl --fail --max-time 5 http://localhost:80 && break
        echo "Tentative $i/10 échouée, nouvel essai dans 2s..."
        sleep 2
      done
    - curl --fail --max-time 10 http://localhost:80 || (echo "L'application ne répond pas"; docker logs fastapi; exit 1)
    - docker stop fastapi
    - docker rm fastapi

push:
  stage: push
  tags: [local]
  before_script:
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - docker push "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"
    - docker push "$IMAGE_NAME:latest"

.deploy_template: &deploy_template
  image: alpine/helm:3.11.2
  tags: [local]
  before_script:
    - set -e
    - mkdir -p ~/.kube
    - echo "[INFO] Décodage de la config Kubernetes..."
    - echo "$KUBE_CONFIG_B64" | base64 -d > ~/.kube/config
    - chmod 600 ~/.kube/config
    - export KUBECONFIG=$HOME/.kube/config
    - echo "[INFO] Vérification de la validité du fichier kubeconfig"
    - kubectl config view || { echo "[ERREUR] kubeconfig invalide"; exit 1; }
    - kubectl config use-context k3s
    - kubectl get namespaces
  script:
    - cp fastapi/values.yaml values.yml
    - |
      helm upgrade --install app fastapi/ --values=values.yml \
        --namespace "$NAMESPACE" \
        --set image.repository="$IMAGE_NAME" \
        --set image.tag="$CI_COMMIT_SHORT_SHA" \
        --set service.nodeport="$NODEPORT"

deploy_dev:
  <<: *deploy_template
  stage: deploy_dev
  environment:
    name: dev-$CI_COMMIT_REF_NAME
    url: http://$IP_DEV:$NODEPORT_DEV
    on_stop: stop_dev
  variables:
    NAMESPACE: $KUBE_NAMESPACE_DEV
    NODEPORT: $NODEPORT_DEV

stop_dev:
  stage: deploy_dev
  tags: [local]
  environment:
    name: dev-$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  variables:
    NAMESPACE: $KUBE_NAMESPACE_DEV
  image: alpine/helm:3.11.2
  script:
    - helm uninstall app -n "$NAMESPACE" || echo "Release not found"

deploy_qa:
  <<: *deploy_template
  stage: deploy_qa
  environment:
    name: qa-$CI_COMMIT_REF_NAME
    url: http://$IP_QA:$NODEPORT_QA
    on_stop: stop_qa
  variables:
    NAMESPACE: $KUBE_NAMESPACE_QA
    NODEPORT: $NODEPORT_QA

stop_qa:
  stage: deploy_qa
  tags: [local]
  environment:
    name: qa-$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  variables:
    NAMESPACE: $KUBE_NAMESPACE_QA
  image: alpine/helm:3.11.2
  script:
    - helm uninstall app -n "$NAMESPACE" || echo "Release not found"

deploy_staging:
  <<: *deploy_template
  stage: deploy_staging
  environment:
    name: staging-$CI_COMMIT_REF_NAME
    url: http://$IP_STAGING:$NODEPORT_STAGING
    on_stop: stop_staging
  variables:
    NAMESPACE: $KUBE_NAMESPACE_STAGING
    NODEPORT: $NODEPORT_STAGING

stop_staging:
  stage: deploy_staging
  tags: [local]
  environment:
    name: staging-$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  variables:
    NAMESPACE: $KUBE_NAMESPACE_STAGING
  image: alpine/helm:3.11.2
  script:
    - helm uninstall app -n "$NAMESPACE" || echo "Release not found"

deploy_prod:
  <<: *deploy_template
